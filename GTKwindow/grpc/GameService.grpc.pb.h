// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: GameService.proto
#ifndef GRPC_GameService_2eproto__INCLUDED
#define GRPC_GameService_2eproto__INCLUDED

#include "GameService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace GrpcGameService {

// The greeting service definition.
class RoomService final {
 public:
  static constexpr char const* service_full_name() {
    return "GrpcGameService.RoomService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status List(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest& request, ::GrpcGameService::RoomListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcGameService::RoomListResponse>> AsyncList(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcGameService::RoomListResponse>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcGameService::RoomListResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcGameService::RoomListResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest& request, ::GrpcGameService::RoomCreateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcGameService::RoomCreateResponse>> AsyncCreate(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcGameService::RoomCreateResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcGameService::RoomCreateResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcGameService::RoomCreateResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::GrpcGameService::GameCommandResponse>> Join(::grpc::ClientContext* context, const ::GrpcGameService::RoomJoinRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::GrpcGameService::GameCommandResponse>>(JoinRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GrpcGameService::GameCommandResponse>> AsyncJoin(::grpc::ClientContext* context, const ::GrpcGameService::RoomJoinRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GrpcGameService::GameCommandResponse>>(AsyncJoinRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GrpcGameService::GameCommandResponse>> PrepareAsyncJoin(::grpc::ClientContext* context, const ::GrpcGameService::RoomJoinRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GrpcGameService::GameCommandResponse>>(PrepareAsyncJoinRaw(context, request, cq));
    }
    virtual ::grpc::Status Move(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest& request, ::GrpcGameService::GameMoveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcGameService::GameMoveResponse>> AsyncMove(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcGameService::GameMoveResponse>>(AsyncMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcGameService::GameMoveResponse>> PrepareAsyncMove(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GrpcGameService::GameMoveResponse>>(PrepareAsyncMoveRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Sends a greeting
      virtual void List(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest* request, ::GrpcGameService::RoomListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::RoomListResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void List(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest* request, ::GrpcGameService::RoomListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void List(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest* request, ::GrpcGameService::RoomListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::RoomListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::RoomListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Create(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest* request, ::GrpcGameService::RoomCreateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::RoomCreateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Create(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest* request, ::GrpcGameService::RoomCreateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Create(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest* request, ::GrpcGameService::RoomCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::RoomCreateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::RoomCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Join(::grpc::ClientContext* context, ::GrpcGameService::RoomJoinRequest* request, ::grpc::ClientReadReactor< ::GrpcGameService::GameCommandResponse>* reactor) = 0;
      #else
      virtual void Join(::grpc::ClientContext* context, ::GrpcGameService::RoomJoinRequest* request, ::grpc::experimental::ClientReadReactor< ::GrpcGameService::GameCommandResponse>* reactor) = 0;
      #endif
      virtual void Move(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest* request, ::GrpcGameService::GameMoveResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Move(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::GameMoveResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Move(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest* request, ::GrpcGameService::GameMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Move(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest* request, ::GrpcGameService::GameMoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Move(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::GameMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Move(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::GameMoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GrpcGameService::RoomListResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GrpcGameService::RoomListResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GrpcGameService::RoomCreateResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GrpcGameService::RoomCreateResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::GrpcGameService::GameCommandResponse>* JoinRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomJoinRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GrpcGameService::GameCommandResponse>* AsyncJoinRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomJoinRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GrpcGameService::GameCommandResponse>* PrepareAsyncJoinRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomJoinRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GrpcGameService::GameMoveResponse>* AsyncMoveRaw(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GrpcGameService::GameMoveResponse>* PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status List(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest& request, ::GrpcGameService::RoomListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcGameService::RoomListResponse>> AsyncList(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcGameService::RoomListResponse>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcGameService::RoomListResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcGameService::RoomListResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    ::grpc::Status Create(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest& request, ::GrpcGameService::RoomCreateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcGameService::RoomCreateResponse>> AsyncCreate(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcGameService::RoomCreateResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcGameService::RoomCreateResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcGameService::RoomCreateResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::GrpcGameService::GameCommandResponse>> Join(::grpc::ClientContext* context, const ::GrpcGameService::RoomJoinRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::GrpcGameService::GameCommandResponse>>(JoinRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GrpcGameService::GameCommandResponse>> AsyncJoin(::grpc::ClientContext* context, const ::GrpcGameService::RoomJoinRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GrpcGameService::GameCommandResponse>>(AsyncJoinRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GrpcGameService::GameCommandResponse>> PrepareAsyncJoin(::grpc::ClientContext* context, const ::GrpcGameService::RoomJoinRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GrpcGameService::GameCommandResponse>>(PrepareAsyncJoinRaw(context, request, cq));
    }
    ::grpc::Status Move(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest& request, ::GrpcGameService::GameMoveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcGameService::GameMoveResponse>> AsyncMove(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcGameService::GameMoveResponse>>(AsyncMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcGameService::GameMoveResponse>> PrepareAsyncMove(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GrpcGameService::GameMoveResponse>>(PrepareAsyncMoveRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void List(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest* request, ::GrpcGameService::RoomListResponse* response, std::function<void(::grpc::Status)>) override;
      void List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::RoomListResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void List(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest* request, ::GrpcGameService::RoomListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void List(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest* request, ::GrpcGameService::RoomListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::RoomListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::RoomListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Create(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest* request, ::GrpcGameService::RoomCreateResponse* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::RoomCreateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Create(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest* request, ::GrpcGameService::RoomCreateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Create(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest* request, ::GrpcGameService::RoomCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::RoomCreateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::RoomCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Join(::grpc::ClientContext* context, ::GrpcGameService::RoomJoinRequest* request, ::grpc::ClientReadReactor< ::GrpcGameService::GameCommandResponse>* reactor) override;
      #else
      void Join(::grpc::ClientContext* context, ::GrpcGameService::RoomJoinRequest* request, ::grpc::experimental::ClientReadReactor< ::GrpcGameService::GameCommandResponse>* reactor) override;
      #endif
      void Move(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest* request, ::GrpcGameService::GameMoveResponse* response, std::function<void(::grpc::Status)>) override;
      void Move(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::GameMoveResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Move(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest* request, ::GrpcGameService::GameMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Move(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest* request, ::GrpcGameService::GameMoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Move(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::GameMoveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Move(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::GameMoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::GrpcGameService::RoomListResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GrpcGameService::RoomListResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GrpcGameService::RoomCreateResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GrpcGameService::RoomCreateResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::GrpcGameService::GameCommandResponse>* JoinRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomJoinRequest& request) override;
    ::grpc::ClientAsyncReader< ::GrpcGameService::GameCommandResponse>* AsyncJoinRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomJoinRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::GrpcGameService::GameCommandResponse>* PrepareAsyncJoinRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomJoinRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GrpcGameService::GameMoveResponse>* AsyncMoveRaw(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GrpcGameService::GameMoveResponse>* PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Join_;
    const ::grpc::internal::RpcMethod rpcmethod_Move_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::GrpcGameService::RoomListRequest* request, ::GrpcGameService::RoomListResponse* response);
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::GrpcGameService::RoomCreateRequest* request, ::GrpcGameService::RoomCreateResponse* response);
    virtual ::grpc::Status Join(::grpc::ServerContext* context, const ::GrpcGameService::RoomJoinRequest* request, ::grpc::ServerWriter< ::GrpcGameService::GameCommandResponse>* writer);
    virtual ::grpc::Status Move(::grpc::ServerContext* context, const ::GrpcGameService::GameMoveRequest* request, ::GrpcGameService::GameMoveResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::GrpcGameService::RoomListRequest* /*request*/, ::GrpcGameService::RoomListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::GrpcGameService::RoomListRequest* request, ::grpc::ServerAsyncResponseWriter< ::GrpcGameService::RoomListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::GrpcGameService::RoomCreateRequest* /*request*/, ::GrpcGameService::RoomCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::GrpcGameService::RoomCreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::GrpcGameService::RoomCreateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Join() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* /*context*/, const ::GrpcGameService::RoomJoinRequest* /*request*/, ::grpc::ServerWriter< ::GrpcGameService::GameCommandResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoin(::grpc::ServerContext* context, ::GrpcGameService::RoomJoinRequest* request, ::grpc::ServerAsyncWriter< ::GrpcGameService::GameCommandResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Move() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::GrpcGameService::GameMoveRequest* /*request*/, ::GrpcGameService::GameMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMove(::grpc::ServerContext* context, ::GrpcGameService::GameMoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::GrpcGameService::GameMoveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_List<WithAsyncMethod_Create<WithAsyncMethod_Join<WithAsyncMethod_Move<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_List() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::GrpcGameService::RoomListRequest, ::GrpcGameService::RoomListResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::GrpcGameService::RoomListRequest* request, ::GrpcGameService::RoomListResponse* response) { return this->List(context, request, response); }));}
    void SetMessageAllocatorFor_List(
        ::grpc::experimental::MessageAllocator< ::GrpcGameService::RoomListRequest, ::GrpcGameService::RoomListResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GrpcGameService::RoomListRequest, ::GrpcGameService::RoomListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::GrpcGameService::RoomListRequest* /*request*/, ::GrpcGameService::RoomListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* List(
      ::grpc::CallbackServerContext* /*context*/, const ::GrpcGameService::RoomListRequest* /*request*/, ::GrpcGameService::RoomListResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* List(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::GrpcGameService::RoomListRequest* /*request*/, ::GrpcGameService::RoomListResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Create() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::GrpcGameService::RoomCreateRequest, ::GrpcGameService::RoomCreateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::GrpcGameService::RoomCreateRequest* request, ::GrpcGameService::RoomCreateResponse* response) { return this->Create(context, request, response); }));}
    void SetMessageAllocatorFor_Create(
        ::grpc::experimental::MessageAllocator< ::GrpcGameService::RoomCreateRequest, ::GrpcGameService::RoomCreateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GrpcGameService::RoomCreateRequest, ::GrpcGameService::RoomCreateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::GrpcGameService::RoomCreateRequest* /*request*/, ::GrpcGameService::RoomCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::GrpcGameService::RoomCreateRequest* /*request*/, ::GrpcGameService::RoomCreateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Create(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::GrpcGameService::RoomCreateRequest* /*request*/, ::GrpcGameService::RoomCreateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Join() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::GrpcGameService::RoomJoinRequest, ::GrpcGameService::GameCommandResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::GrpcGameService::RoomJoinRequest* request) { return this->Join(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* /*context*/, const ::GrpcGameService::RoomJoinRequest* /*request*/, ::grpc::ServerWriter< ::GrpcGameService::GameCommandResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::GrpcGameService::GameCommandResponse>* Join(
      ::grpc::CallbackServerContext* /*context*/, const ::GrpcGameService::RoomJoinRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::GrpcGameService::GameCommandResponse>* Join(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::GrpcGameService::RoomJoinRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Move() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::GrpcGameService::GameMoveRequest, ::GrpcGameService::GameMoveResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::GrpcGameService::GameMoveRequest* request, ::GrpcGameService::GameMoveResponse* response) { return this->Move(context, request, response); }));}
    void SetMessageAllocatorFor_Move(
        ::grpc::experimental::MessageAllocator< ::GrpcGameService::GameMoveRequest, ::GrpcGameService::GameMoveResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GrpcGameService::GameMoveRequest, ::GrpcGameService::GameMoveResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::GrpcGameService::GameMoveRequest* /*request*/, ::GrpcGameService::GameMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Move(
      ::grpc::CallbackServerContext* /*context*/, const ::GrpcGameService::GameMoveRequest* /*request*/, ::GrpcGameService::GameMoveResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Move(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::GrpcGameService::GameMoveRequest* /*request*/, ::GrpcGameService::GameMoveResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_List<ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_Join<ExperimentalWithCallbackMethod_Move<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_List<ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_Join<ExperimentalWithCallbackMethod_Move<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::GrpcGameService::RoomListRequest* /*request*/, ::GrpcGameService::RoomListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::GrpcGameService::RoomCreateRequest* /*request*/, ::GrpcGameService::RoomCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Join() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* /*context*/, const ::GrpcGameService::RoomJoinRequest* /*request*/, ::grpc::ServerWriter< ::GrpcGameService::GameCommandResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Move() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::GrpcGameService::GameMoveRequest* /*request*/, ::GrpcGameService::GameMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_List() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::GrpcGameService::RoomListRequest* /*request*/, ::GrpcGameService::RoomListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::GrpcGameService::RoomCreateRequest* /*request*/, ::GrpcGameService::RoomCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Join() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* /*context*/, const ::GrpcGameService::RoomJoinRequest* /*request*/, ::grpc::ServerWriter< ::GrpcGameService::GameCommandResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Move() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::GrpcGameService::GameMoveRequest* /*request*/, ::GrpcGameService::GameMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_List() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->List(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::GrpcGameService::RoomListRequest* /*request*/, ::GrpcGameService::RoomListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* List(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* List(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Create() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Create(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::GrpcGameService::RoomCreateRequest* /*request*/, ::GrpcGameService::RoomCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Create(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Join() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Join(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* /*context*/, const ::GrpcGameService::RoomJoinRequest* /*request*/, ::grpc::ServerWriter< ::GrpcGameService::GameCommandResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Join(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Join(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Move() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Move(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::GrpcGameService::GameMoveRequest* /*request*/, ::GrpcGameService::GameMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Move(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Move(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_List() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::GrpcGameService::RoomListRequest, ::GrpcGameService::RoomListResponse>(std::bind(&WithStreamedUnaryMethod_List<BaseClass>::StreamedList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::GrpcGameService::RoomListRequest* /*request*/, ::GrpcGameService::RoomListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GrpcGameService::RoomListRequest,::GrpcGameService::RoomListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::GrpcGameService::RoomCreateRequest, ::GrpcGameService::RoomCreateResponse>(std::bind(&WithStreamedUnaryMethod_Create<BaseClass>::StreamedCreate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::GrpcGameService::RoomCreateRequest* /*request*/, ::GrpcGameService::RoomCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GrpcGameService::RoomCreateRequest,::GrpcGameService::RoomCreateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Move() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::GrpcGameService::GameMoveRequest, ::GrpcGameService::GameMoveResponse>(std::bind(&WithStreamedUnaryMethod_Move<BaseClass>::StreamedMove, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::GrpcGameService::GameMoveRequest* /*request*/, ::GrpcGameService::GameMoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GrpcGameService::GameMoveRequest,::GrpcGameService::GameMoveResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_List<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Move<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Join() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::GrpcGameService::RoomJoinRequest, ::GrpcGameService::GameCommandResponse>(std::bind(&WithSplitStreamingMethod_Join<BaseClass>::StreamedJoin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Join(::grpc::ServerContext* /*context*/, const ::GrpcGameService::RoomJoinRequest* /*request*/, ::grpc::ServerWriter< ::GrpcGameService::GameCommandResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedJoin(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::GrpcGameService::RoomJoinRequest,::GrpcGameService::GameCommandResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Join<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_List<WithStreamedUnaryMethod_Create<WithSplitStreamingMethod_Join<WithStreamedUnaryMethod_Move<Service > > > > StreamedService;
};

}  // namespace GrpcGameService


#endif  // GRPC_GameService_2eproto__INCLUDED
