// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameService.proto

#include "GameService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_GameService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEnd_GameService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameMove_GameService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameStart_GameService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameState_GameService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameTile_GameService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_GameService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Room_GameService_2eproto;
namespace GrpcGameService {
class RoomListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomListRequest> _instance;
} _RoomListRequest_default_instance_;
class RoomListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomListResponse> _instance;
} _RoomListResponse_default_instance_;
class RoomCreateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomCreateRequest> _instance;
} _RoomCreateRequest_default_instance_;
class RoomCreateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomCreateResponse> _instance;
} _RoomCreateResponse_default_instance_;
class RoomJoinRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomJoinRequest> _instance;
} _RoomJoinRequest_default_instance_;
class GameMoveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameMoveRequest> _instance;
} _GameMoveRequest_default_instance_;
class GameMoveResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameMoveResponse> _instance;
} _GameMoveResponse_default_instance_;
class GameCommandResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameCommandResponse> _instance;
  const ::GrpcGameService::GameMove* move_;
  const ::GrpcGameService::GameStart* start_;
  const ::GrpcGameService::GameEnd* end_;
} _GameCommandResponse_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class GameMoveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameMove> _instance;
} _GameMove_default_instance_;
class GameTileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameTile> _instance;
} _GameTile_default_instance_;
class GameStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameState> _instance;
} _GameState_default_instance_;
class GameStartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameStart> _instance;
} _GameStart_default_instance_;
class GameEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameEnd> _instance;
  int win_;
  int abandon_;
  bool draw_;
} _GameEnd_default_instance_;
class RoomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Room> _instance;
} _Room_default_instance_;
}  // namespace GrpcGameService
static void InitDefaultsscc_info_GameCommandResponse_GameService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GrpcGameService::_GameCommandResponse_default_instance_;
    new (ptr) ::GrpcGameService::GameCommandResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GrpcGameService::GameCommandResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GameCommandResponse_GameService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GameCommandResponse_GameService_2eproto}, {
      &scc_info_GameMove_GameService_2eproto.base,
      &scc_info_GameStart_GameService_2eproto.base,
      &scc_info_GameEnd_GameService_2eproto.base,}};

static void InitDefaultsscc_info_GameEnd_GameService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GrpcGameService::_GameEnd_default_instance_;
    new (ptr) ::GrpcGameService::GameEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GrpcGameService::GameEnd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameEnd_GameService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameEnd_GameService_2eproto}, {}};

static void InitDefaultsscc_info_GameMove_GameService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GrpcGameService::_GameMove_default_instance_;
    new (ptr) ::GrpcGameService::GameMove();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GrpcGameService::GameMove::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameMove_GameService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameMove_GameService_2eproto}, {
      &scc_info_Position_GameService_2eproto.base,}};

static void InitDefaultsscc_info_GameMoveRequest_GameService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GrpcGameService::_GameMoveRequest_default_instance_;
    new (ptr) ::GrpcGameService::GameMoveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GrpcGameService::GameMoveRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameMoveRequest_GameService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameMoveRequest_GameService_2eproto}, {
      &scc_info_GameMove_GameService_2eproto.base,}};

static void InitDefaultsscc_info_GameMoveResponse_GameService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GrpcGameService::_GameMoveResponse_default_instance_;
    new (ptr) ::GrpcGameService::GameMoveResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GrpcGameService::GameMoveResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameMoveResponse_GameService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameMoveResponse_GameService_2eproto}, {}};

static void InitDefaultsscc_info_GameStart_GameService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GrpcGameService::_GameStart_default_instance_;
    new (ptr) ::GrpcGameService::GameStart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GrpcGameService::GameStart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameStart_GameService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameStart_GameService_2eproto}, {
      &scc_info_GameState_GameService_2eproto.base,}};

static void InitDefaultsscc_info_GameState_GameService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GrpcGameService::_GameState_default_instance_;
    new (ptr) ::GrpcGameService::GameState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GrpcGameService::GameState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameState_GameService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameState_GameService_2eproto}, {
      &scc_info_GameTile_GameService_2eproto.base,}};

static void InitDefaultsscc_info_GameTile_GameService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GrpcGameService::_GameTile_default_instance_;
    new (ptr) ::GrpcGameService::GameTile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GrpcGameService::GameTile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameTile_GameService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameTile_GameService_2eproto}, {
      &scc_info_Position_GameService_2eproto.base,}};

static void InitDefaultsscc_info_Position_GameService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GrpcGameService::_Position_default_instance_;
    new (ptr) ::GrpcGameService::Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GrpcGameService::Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_GameService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Position_GameService_2eproto}, {}};

static void InitDefaultsscc_info_Room_GameService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GrpcGameService::_Room_default_instance_;
    new (ptr) ::GrpcGameService::Room();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GrpcGameService::Room::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Room_GameService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Room_GameService_2eproto}, {}};

static void InitDefaultsscc_info_RoomCreateRequest_GameService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GrpcGameService::_RoomCreateRequest_default_instance_;
    new (ptr) ::GrpcGameService::RoomCreateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GrpcGameService::RoomCreateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomCreateRequest_GameService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomCreateRequest_GameService_2eproto}, {}};

static void InitDefaultsscc_info_RoomCreateResponse_GameService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GrpcGameService::_RoomCreateResponse_default_instance_;
    new (ptr) ::GrpcGameService::RoomCreateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GrpcGameService::RoomCreateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoomCreateResponse_GameService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoomCreateResponse_GameService_2eproto}, {
      &scc_info_Room_GameService_2eproto.base,}};

static void InitDefaultsscc_info_RoomJoinRequest_GameService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GrpcGameService::_RoomJoinRequest_default_instance_;
    new (ptr) ::GrpcGameService::RoomJoinRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GrpcGameService::RoomJoinRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoomJoinRequest_GameService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoomJoinRequest_GameService_2eproto}, {
      &scc_info_Room_GameService_2eproto.base,}};

static void InitDefaultsscc_info_RoomListRequest_GameService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GrpcGameService::_RoomListRequest_default_instance_;
    new (ptr) ::GrpcGameService::RoomListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GrpcGameService::RoomListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomListRequest_GameService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomListRequest_GameService_2eproto}, {}};

static void InitDefaultsscc_info_RoomListResponse_GameService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GrpcGameService::_RoomListResponse_default_instance_;
    new (ptr) ::GrpcGameService::RoomListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GrpcGameService::RoomListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoomListResponse_GameService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoomListResponse_GameService_2eproto}, {
      &scc_info_Room_GameService_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_GameService_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_GameService_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_GameService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_GameService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::RoomListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::RoomListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::RoomListResponse, rooms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::RoomCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::RoomCreateRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::RoomCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::RoomCreateResponse, room_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::RoomJoinRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::RoomJoinRequest, room_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameMoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameMoveRequest, move_),
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameMoveRequest, gameid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameMoveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameMoveResponse, valid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameCommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameCommandResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::GrpcGameService::GameCommandResponseDefaultTypeInternal, move_),
  offsetof(::GrpcGameService::GameCommandResponseDefaultTypeInternal, start_),
  offsetof(::GrpcGameService::GameCommandResponseDefaultTypeInternal, end_),
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameCommandResponse, Commands_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::Position, column_),
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::Position, row_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameMove, from_),
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameMove, to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameTile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameTile, figurine_),
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameTile, figurinecolor_),
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameTile, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameState, tiles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameStart, color_),
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameStart, state_),
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameStart, gameid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameEnd, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::GrpcGameService::GameEndDefaultTypeInternal, win_),
  offsetof(::GrpcGameService::GameEndDefaultTypeInternal, abandon_),
  offsetof(::GrpcGameService::GameEndDefaultTypeInternal, draw_),
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::GameEnd, TypOfEnd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::Room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::Room, roomid_),
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::Room, name_),
  PROTOBUF_FIELD_OFFSET(::GrpcGameService::Room, playercount_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::GrpcGameService::RoomListRequest)},
  { 5, -1, sizeof(::GrpcGameService::RoomListResponse)},
  { 11, -1, sizeof(::GrpcGameService::RoomCreateRequest)},
  { 17, -1, sizeof(::GrpcGameService::RoomCreateResponse)},
  { 23, -1, sizeof(::GrpcGameService::RoomJoinRequest)},
  { 29, -1, sizeof(::GrpcGameService::GameMoveRequest)},
  { 36, -1, sizeof(::GrpcGameService::GameMoveResponse)},
  { 42, -1, sizeof(::GrpcGameService::GameCommandResponse)},
  { 51, -1, sizeof(::GrpcGameService::Position)},
  { 58, -1, sizeof(::GrpcGameService::GameMove)},
  { 65, -1, sizeof(::GrpcGameService::GameTile)},
  { 73, -1, sizeof(::GrpcGameService::GameState)},
  { 79, -1, sizeof(::GrpcGameService::GameStart)},
  { 87, -1, sizeof(::GrpcGameService::GameEnd)},
  { 96, -1, sizeof(::GrpcGameService::Room)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GrpcGameService::_RoomListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GrpcGameService::_RoomListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GrpcGameService::_RoomCreateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GrpcGameService::_RoomCreateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GrpcGameService::_RoomJoinRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GrpcGameService::_GameMoveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GrpcGameService::_GameMoveResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GrpcGameService::_GameCommandResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GrpcGameService::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GrpcGameService::_GameMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GrpcGameService::_GameTile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GrpcGameService::_GameState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GrpcGameService::_GameStart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GrpcGameService::_GameEnd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GrpcGameService::_Room_default_instance_),
};

const char descriptor_table_protodef_GameService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021GameService.proto\022\017GrpcGameService\"\021\n\017"
  "RoomListRequest\"8\n\020RoomListResponse\022$\n\005r"
  "ooms\030\001 \003(\0132\025.GrpcGameService.Room\"!\n\021Roo"
  "mCreateRequest\022\014\n\004name\030\001 \001(\t\"9\n\022RoomCrea"
  "teResponse\022#\n\004room\030\001 \001(\0132\025.GrpcGameServi"
  "ce.Room\"6\n\017RoomJoinRequest\022#\n\004room\030\001 \001(\013"
  "2\025.GrpcGameService.Room\"J\n\017GameMoveReque"
  "st\022\'\n\004move\030\001 \001(\0132\031.GrpcGameService.GameM"
  "ove\022\016\n\006gameId\030\002 \001(\t\"!\n\020GameMoveResponse\022"
  "\r\n\005valid\030\001 \001(\010\"\242\001\n\023GameCommandResponse\022)"
  "\n\004move\030\001 \001(\0132\031.GrpcGameService.GameMoveH"
  "\000\022+\n\005start\030\002 \001(\0132\032.GrpcGameService.GameS"
  "tartH\000\022\'\n\003end\030\003 \001(\0132\030.GrpcGameService.Ga"
  "meEndH\000B\n\n\010Commands\"\'\n\010Position\022\016\n\006colum"
  "n\030\001 \001(\005\022\013\n\003row\030\002 \001(\005\"Z\n\010GameMove\022\'\n\004from"
  "\030\001 \001(\0132\031.GrpcGameService.Position\022%\n\002to\030"
  "\002 \001(\0132\031.GrpcGameService.Position\"\223\001\n\010Gam"
  "eTile\022+\n\010figurine\030\001 \001(\0162\031.GrpcGameServic"
  "e.Figurine\022-\n\rfigurineColor\030\002 \001(\0162\026.Grpc"
  "GameService.Color\022+\n\010position\030\003 \001(\0132\031.Gr"
  "pcGameService.Position\"5\n\tGameState\022(\n\005t"
  "iles\030\001 \003(\0132\031.GrpcGameService.GameTile\"m\n"
  "\tGameStart\022%\n\005color\030\001 \001(\0162\026.GrpcGameServ"
  "ice.Color\022)\n\005state\030\002 \001(\0132\032.GrpcGameServi"
  "ce.GameState\022\016\n\006gameId\030\003 \001(\t\"w\n\007GameEnd\022"
  "%\n\003win\030\001 \001(\0162\026.GrpcGameService.ColorH\000\022)"
  "\n\007abandon\030\002 \001(\0162\026.GrpcGameService.ColorH"
  "\000\022\016\n\004draw\030\003 \001(\010H\000B\n\n\010TypOfEnd\"9\n\004Room\022\016\n"
  "\006RoomId\030\001 \001(\005\022\014\n\004Name\030\002 \001(\t\022\023\n\013PlayerCou"
  "nt\030\003 \001(\005*\'\n\005Color\022\010\n\004NONE\020\000\022\t\n\005WHITE\020\001\022\t"
  "\n\005BLACK\020\002*U\n\010Figurine\022\010\n\004None\020\000\022\010\n\004King\020"
  "\001\022\t\n\005Queen\020\002\022\010\n\004Rook\020\003\022\n\n\006Knight\020\004\022\n\n\006Bi"
  "shop\020\005\022\010\n\004Pawn\020\0062\314\002\n\013RoomService\022K\n\004List"
  "\022 .GrpcGameService.RoomListRequest\032!.Grp"
  "cGameService.RoomListResponse\022Q\n\006Create\022"
  "\".GrpcGameService.RoomCreateRequest\032#.Gr"
  "pcGameService.RoomCreateResponse\022P\n\004Join"
  "\022 .GrpcGameService.RoomJoinRequest\032$.Grp"
  "cGameService.GameCommandResponse0\001\022K\n\004Mo"
  "ve\022 .GrpcGameService.GameMoveRequest\032!.G"
  "rpcGameService.GameMoveResponseB\022\252\002\017Grpc"
  "GameServiceb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_GameService_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_GameService_2eproto_sccs[15] = {
  &scc_info_GameCommandResponse_GameService_2eproto.base,
  &scc_info_GameEnd_GameService_2eproto.base,
  &scc_info_GameMove_GameService_2eproto.base,
  &scc_info_GameMoveRequest_GameService_2eproto.base,
  &scc_info_GameMoveResponse_GameService_2eproto.base,
  &scc_info_GameStart_GameService_2eproto.base,
  &scc_info_GameState_GameService_2eproto.base,
  &scc_info_GameTile_GameService_2eproto.base,
  &scc_info_Position_GameService_2eproto.base,
  &scc_info_Room_GameService_2eproto.base,
  &scc_info_RoomCreateRequest_GameService_2eproto.base,
  &scc_info_RoomCreateResponse_GameService_2eproto.base,
  &scc_info_RoomJoinRequest_GameService_2eproto.base,
  &scc_info_RoomListRequest_GameService_2eproto.base,
  &scc_info_RoomListResponse_GameService_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_GameService_2eproto_once;
static bool descriptor_table_GameService_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameService_2eproto = {
  &descriptor_table_GameService_2eproto_initialized, descriptor_table_protodef_GameService_2eproto, "GameService.proto", 1659,
  &descriptor_table_GameService_2eproto_once, descriptor_table_GameService_2eproto_sccs, descriptor_table_GameService_2eproto_deps, 15, 0,
  schemas, file_default_instances, TableStruct_GameService_2eproto::offsets,
  file_level_metadata_GameService_2eproto, 15, file_level_enum_descriptors_GameService_2eproto, file_level_service_descriptors_GameService_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GameService_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_GameService_2eproto), true);
namespace GrpcGameService {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GameService_2eproto);
  return file_level_enum_descriptors_GameService_2eproto[0];
}
bool Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Figurine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GameService_2eproto);
  return file_level_enum_descriptors_GameService_2eproto[1];
}
bool Figurine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RoomListRequest::InitAsDefaultInstance() {
}
class RoomListRequest::_Internal {
 public:
};

RoomListRequest::RoomListRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GrpcGameService.RoomListRequest)
}
RoomListRequest::RoomListRequest(const RoomListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GrpcGameService.RoomListRequest)
}

void RoomListRequest::SharedCtor() {
}

RoomListRequest::~RoomListRequest() {
  // @@protoc_insertion_point(destructor:GrpcGameService.RoomListRequest)
  SharedDtor();
}

void RoomListRequest::SharedDtor() {
}

void RoomListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomListRequest& RoomListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomListRequest_GameService_2eproto.base);
  return *internal_default_instance();
}


void RoomListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GrpcGameService.RoomListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* RoomListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GrpcGameService.RoomListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GrpcGameService.RoomListRequest)
  return target;
}

size_t RoomListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GrpcGameService.RoomListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GrpcGameService.RoomListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GrpcGameService.RoomListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GrpcGameService.RoomListRequest)
    MergeFrom(*source);
  }
}

void RoomListRequest::MergeFrom(const RoomListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GrpcGameService.RoomListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RoomListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GrpcGameService.RoomListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomListRequest::CopyFrom(const RoomListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GrpcGameService.RoomListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomListRequest::IsInitialized() const {
  return true;
}

void RoomListRequest::InternalSwap(RoomListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomListResponse::InitAsDefaultInstance() {
}
class RoomListResponse::_Internal {
 public:
};

RoomListResponse::RoomListResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GrpcGameService.RoomListResponse)
}
RoomListResponse::RoomListResponse(const RoomListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rooms_(from.rooms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GrpcGameService.RoomListResponse)
}

void RoomListResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomListResponse_GameService_2eproto.base);
}

RoomListResponse::~RoomListResponse() {
  // @@protoc_insertion_point(destructor:GrpcGameService.RoomListResponse)
  SharedDtor();
}

void RoomListResponse::SharedDtor() {
}

void RoomListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomListResponse& RoomListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomListResponse_GameService_2eproto.base);
  return *internal_default_instance();
}


void RoomListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GrpcGameService.RoomListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rooms_.Clear();
  _internal_metadata_.Clear();
}

const char* RoomListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GrpcGameService.Room rooms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rooms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GrpcGameService.RoomListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GrpcGameService.Room rooms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rooms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rooms(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GrpcGameService.RoomListResponse)
  return target;
}

size_t RoomListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GrpcGameService.RoomListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GrpcGameService.Room rooms = 1;
  total_size += 1UL * this->_internal_rooms_size();
  for (const auto& msg : this->rooms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GrpcGameService.RoomListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GrpcGameService.RoomListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GrpcGameService.RoomListResponse)
    MergeFrom(*source);
  }
}

void RoomListResponse::MergeFrom(const RoomListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GrpcGameService.RoomListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rooms_.MergeFrom(from.rooms_);
}

void RoomListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GrpcGameService.RoomListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomListResponse::CopyFrom(const RoomListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GrpcGameService.RoomListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomListResponse::IsInitialized() const {
  return true;
}

void RoomListResponse::InternalSwap(RoomListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rooms_.InternalSwap(&other->rooms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomCreateRequest::InitAsDefaultInstance() {
}
class RoomCreateRequest::_Internal {
 public:
};

RoomCreateRequest::RoomCreateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GrpcGameService.RoomCreateRequest)
}
RoomCreateRequest::RoomCreateRequest(const RoomCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:GrpcGameService.RoomCreateRequest)
}

void RoomCreateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomCreateRequest_GameService_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RoomCreateRequest::~RoomCreateRequest() {
  // @@protoc_insertion_point(destructor:GrpcGameService.RoomCreateRequest)
  SharedDtor();
}

void RoomCreateRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoomCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomCreateRequest& RoomCreateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomCreateRequest_GameService_2eproto.base);
  return *internal_default_instance();
}


void RoomCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GrpcGameService.RoomCreateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RoomCreateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GrpcGameService.RoomCreateRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomCreateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GrpcGameService.RoomCreateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GrpcGameService.RoomCreateRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GrpcGameService.RoomCreateRequest)
  return target;
}

size_t RoomCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GrpcGameService.RoomCreateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomCreateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GrpcGameService.RoomCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomCreateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomCreateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GrpcGameService.RoomCreateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GrpcGameService.RoomCreateRequest)
    MergeFrom(*source);
  }
}

void RoomCreateRequest::MergeFrom(const RoomCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GrpcGameService.RoomCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void RoomCreateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GrpcGameService.RoomCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomCreateRequest::CopyFrom(const RoomCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GrpcGameService.RoomCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCreateRequest::IsInitialized() const {
  return true;
}

void RoomCreateRequest::InternalSwap(RoomCreateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomCreateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomCreateResponse::InitAsDefaultInstance() {
  ::GrpcGameService::_RoomCreateResponse_default_instance_._instance.get_mutable()->room_ = const_cast< ::GrpcGameService::Room*>(
      ::GrpcGameService::Room::internal_default_instance());
}
class RoomCreateResponse::_Internal {
 public:
  static const ::GrpcGameService::Room& room(const RoomCreateResponse* msg);
};

const ::GrpcGameService::Room&
RoomCreateResponse::_Internal::room(const RoomCreateResponse* msg) {
  return *msg->room_;
}
RoomCreateResponse::RoomCreateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GrpcGameService.RoomCreateResponse)
}
RoomCreateResponse::RoomCreateResponse(const RoomCreateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_room()) {
    room_ = new ::GrpcGameService::Room(*from.room_);
  } else {
    room_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GrpcGameService.RoomCreateResponse)
}

void RoomCreateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomCreateResponse_GameService_2eproto.base);
  room_ = nullptr;
}

RoomCreateResponse::~RoomCreateResponse() {
  // @@protoc_insertion_point(destructor:GrpcGameService.RoomCreateResponse)
  SharedDtor();
}

void RoomCreateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete room_;
}

void RoomCreateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomCreateResponse& RoomCreateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomCreateResponse_GameService_2eproto.base);
  return *internal_default_instance();
}


void RoomCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GrpcGameService.RoomCreateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RoomCreateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GrpcGameService.Room room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomCreateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GrpcGameService.RoomCreateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GrpcGameService.Room room = 1;
  if (this->has_room()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::room(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GrpcGameService.RoomCreateResponse)
  return target;
}

size_t RoomCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GrpcGameService.RoomCreateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GrpcGameService.Room room = 1;
  if (this->has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *room_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomCreateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GrpcGameService.RoomCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomCreateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomCreateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GrpcGameService.RoomCreateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GrpcGameService.RoomCreateResponse)
    MergeFrom(*source);
  }
}

void RoomCreateResponse::MergeFrom(const RoomCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GrpcGameService.RoomCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room()) {
    _internal_mutable_room()->::GrpcGameService::Room::MergeFrom(from._internal_room());
  }
}

void RoomCreateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GrpcGameService.RoomCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomCreateResponse::CopyFrom(const RoomCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GrpcGameService.RoomCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCreateResponse::IsInitialized() const {
  return true;
}

void RoomCreateResponse::InternalSwap(RoomCreateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(room_, other->room_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomCreateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomJoinRequest::InitAsDefaultInstance() {
  ::GrpcGameService::_RoomJoinRequest_default_instance_._instance.get_mutable()->room_ = const_cast< ::GrpcGameService::Room*>(
      ::GrpcGameService::Room::internal_default_instance());
}
class RoomJoinRequest::_Internal {
 public:
  static const ::GrpcGameService::Room& room(const RoomJoinRequest* msg);
};

const ::GrpcGameService::Room&
RoomJoinRequest::_Internal::room(const RoomJoinRequest* msg) {
  return *msg->room_;
}
RoomJoinRequest::RoomJoinRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GrpcGameService.RoomJoinRequest)
}
RoomJoinRequest::RoomJoinRequest(const RoomJoinRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_room()) {
    room_ = new ::GrpcGameService::Room(*from.room_);
  } else {
    room_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GrpcGameService.RoomJoinRequest)
}

void RoomJoinRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomJoinRequest_GameService_2eproto.base);
  room_ = nullptr;
}

RoomJoinRequest::~RoomJoinRequest() {
  // @@protoc_insertion_point(destructor:GrpcGameService.RoomJoinRequest)
  SharedDtor();
}

void RoomJoinRequest::SharedDtor() {
  if (this != internal_default_instance()) delete room_;
}

void RoomJoinRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomJoinRequest& RoomJoinRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomJoinRequest_GameService_2eproto.base);
  return *internal_default_instance();
}


void RoomJoinRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GrpcGameService.RoomJoinRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RoomJoinRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GrpcGameService.Room room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomJoinRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GrpcGameService.RoomJoinRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GrpcGameService.Room room = 1;
  if (this->has_room()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::room(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GrpcGameService.RoomJoinRequest)
  return target;
}

size_t RoomJoinRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GrpcGameService.RoomJoinRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GrpcGameService.Room room = 1;
  if (this->has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *room_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomJoinRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GrpcGameService.RoomJoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomJoinRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomJoinRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GrpcGameService.RoomJoinRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GrpcGameService.RoomJoinRequest)
    MergeFrom(*source);
  }
}

void RoomJoinRequest::MergeFrom(const RoomJoinRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GrpcGameService.RoomJoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room()) {
    _internal_mutable_room()->::GrpcGameService::Room::MergeFrom(from._internal_room());
  }
}

void RoomJoinRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GrpcGameService.RoomJoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomJoinRequest::CopyFrom(const RoomJoinRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GrpcGameService.RoomJoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomJoinRequest::IsInitialized() const {
  return true;
}

void RoomJoinRequest::InternalSwap(RoomJoinRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(room_, other->room_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomJoinRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameMoveRequest::InitAsDefaultInstance() {
  ::GrpcGameService::_GameMoveRequest_default_instance_._instance.get_mutable()->move_ = const_cast< ::GrpcGameService::GameMove*>(
      ::GrpcGameService::GameMove::internal_default_instance());
}
class GameMoveRequest::_Internal {
 public:
  static const ::GrpcGameService::GameMove& move(const GameMoveRequest* msg);
};

const ::GrpcGameService::GameMove&
GameMoveRequest::_Internal::move(const GameMoveRequest* msg) {
  return *msg->move_;
}
GameMoveRequest::GameMoveRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GrpcGameService.GameMoveRequest)
}
GameMoveRequest::GameMoveRequest(const GameMoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gameid().empty()) {
    gameid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  if (from._internal_has_move()) {
    move_ = new ::GrpcGameService::GameMove(*from.move_);
  } else {
    move_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GrpcGameService.GameMoveRequest)
}

void GameMoveRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameMoveRequest_GameService_2eproto.base);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  move_ = nullptr;
}

GameMoveRequest::~GameMoveRequest() {
  // @@protoc_insertion_point(destructor:GrpcGameService.GameMoveRequest)
  SharedDtor();
}

void GameMoveRequest::SharedDtor() {
  gameid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete move_;
}

void GameMoveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMoveRequest& GameMoveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameMoveRequest_GameService_2eproto.base);
  return *internal_default_instance();
}


void GameMoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GrpcGameService.GameMoveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && move_ != nullptr) {
    delete move_;
  }
  move_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GameMoveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GrpcGameService.GameMove move = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_move(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gameId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gameid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GrpcGameService.GameMoveRequest.gameId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameMoveRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GrpcGameService.GameMoveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GrpcGameService.GameMove move = 1;
  if (this->has_move()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::move(this), target, stream);
  }

  // string gameId = 2;
  if (this->gameid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gameid().data(), static_cast<int>(this->_internal_gameid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GrpcGameService.GameMoveRequest.gameId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GrpcGameService.GameMoveRequest)
  return target;
}

size_t GameMoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GrpcGameService.GameMoveRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gameId = 2;
  if (this->gameid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameid());
  }

  // .GrpcGameService.GameMove move = 1;
  if (this->has_move()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *move_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMoveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GrpcGameService.GameMoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMoveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameMoveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GrpcGameService.GameMoveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GrpcGameService.GameMoveRequest)
    MergeFrom(*source);
  }
}

void GameMoveRequest::MergeFrom(const GameMoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GrpcGameService.GameMoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameid().size() > 0) {

    gameid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  if (from.has_move()) {
    _internal_mutable_move()->::GrpcGameService::GameMove::MergeFrom(from._internal_move());
  }
}

void GameMoveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GrpcGameService.GameMoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMoveRequest::CopyFrom(const GameMoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GrpcGameService.GameMoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMoveRequest::IsInitialized() const {
  return true;
}

void GameMoveRequest::InternalSwap(GameMoveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gameid_.Swap(&other->gameid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(move_, other->move_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameMoveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameMoveResponse::InitAsDefaultInstance() {
}
class GameMoveResponse::_Internal {
 public:
};

GameMoveResponse::GameMoveResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GrpcGameService.GameMoveResponse)
}
GameMoveResponse::GameMoveResponse(const GameMoveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  valid_ = from.valid_;
  // @@protoc_insertion_point(copy_constructor:GrpcGameService.GameMoveResponse)
}

void GameMoveResponse::SharedCtor() {
  valid_ = false;
}

GameMoveResponse::~GameMoveResponse() {
  // @@protoc_insertion_point(destructor:GrpcGameService.GameMoveResponse)
  SharedDtor();
}

void GameMoveResponse::SharedDtor() {
}

void GameMoveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMoveResponse& GameMoveResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameMoveResponse_GameService_2eproto.base);
  return *internal_default_instance();
}


void GameMoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GrpcGameService.GameMoveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  valid_ = false;
  _internal_metadata_.Clear();
}

const char* GameMoveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameMoveResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GrpcGameService.GameMoveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GrpcGameService.GameMoveResponse)
  return target;
}

size_t GameMoveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GrpcGameService.GameMoveResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->valid() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMoveResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GrpcGameService.GameMoveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMoveResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameMoveResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GrpcGameService.GameMoveResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GrpcGameService.GameMoveResponse)
    MergeFrom(*source);
  }
}

void GameMoveResponse::MergeFrom(const GameMoveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GrpcGameService.GameMoveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.valid() != 0) {
    _internal_set_valid(from._internal_valid());
  }
}

void GameMoveResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GrpcGameService.GameMoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMoveResponse::CopyFrom(const GameMoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GrpcGameService.GameMoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMoveResponse::IsInitialized() const {
  return true;
}

void GameMoveResponse::InternalSwap(GameMoveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(valid_, other->valid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameMoveResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameCommandResponse::InitAsDefaultInstance() {
  ::GrpcGameService::_GameCommandResponse_default_instance_.move_ = const_cast< ::GrpcGameService::GameMove*>(
      ::GrpcGameService::GameMove::internal_default_instance());
  ::GrpcGameService::_GameCommandResponse_default_instance_.start_ = const_cast< ::GrpcGameService::GameStart*>(
      ::GrpcGameService::GameStart::internal_default_instance());
  ::GrpcGameService::_GameCommandResponse_default_instance_.end_ = const_cast< ::GrpcGameService::GameEnd*>(
      ::GrpcGameService::GameEnd::internal_default_instance());
}
class GameCommandResponse::_Internal {
 public:
  static const ::GrpcGameService::GameMove& move(const GameCommandResponse* msg);
  static const ::GrpcGameService::GameStart& start(const GameCommandResponse* msg);
  static const ::GrpcGameService::GameEnd& end(const GameCommandResponse* msg);
};

const ::GrpcGameService::GameMove&
GameCommandResponse::_Internal::move(const GameCommandResponse* msg) {
  return *msg->Commands_.move_;
}
const ::GrpcGameService::GameStart&
GameCommandResponse::_Internal::start(const GameCommandResponse* msg) {
  return *msg->Commands_.start_;
}
const ::GrpcGameService::GameEnd&
GameCommandResponse::_Internal::end(const GameCommandResponse* msg) {
  return *msg->Commands_.end_;
}
void GameCommandResponse::set_allocated_move(::GrpcGameService::GameMove* move) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Commands();
  if (move) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      move = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move, submessage_arena);
    }
    set_has_move();
    Commands_.move_ = move;
  }
  // @@protoc_insertion_point(field_set_allocated:GrpcGameService.GameCommandResponse.move)
}
void GameCommandResponse::set_allocated_start(::GrpcGameService::GameStart* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Commands();
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    set_has_start();
    Commands_.start_ = start;
  }
  // @@protoc_insertion_point(field_set_allocated:GrpcGameService.GameCommandResponse.start)
}
void GameCommandResponse::set_allocated_end(::GrpcGameService::GameEnd* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Commands();
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    set_has_end();
    Commands_.end_ = end;
  }
  // @@protoc_insertion_point(field_set_allocated:GrpcGameService.GameCommandResponse.end)
}
GameCommandResponse::GameCommandResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GrpcGameService.GameCommandResponse)
}
GameCommandResponse::GameCommandResponse(const GameCommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_Commands();
  switch (from.Commands_case()) {
    case kMove: {
      _internal_mutable_move()->::GrpcGameService::GameMove::MergeFrom(from._internal_move());
      break;
    }
    case kStart: {
      _internal_mutable_start()->::GrpcGameService::GameStart::MergeFrom(from._internal_start());
      break;
    }
    case kEnd: {
      _internal_mutable_end()->::GrpcGameService::GameEnd::MergeFrom(from._internal_end());
      break;
    }
    case COMMANDS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GrpcGameService.GameCommandResponse)
}

void GameCommandResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameCommandResponse_GameService_2eproto.base);
  clear_has_Commands();
}

GameCommandResponse::~GameCommandResponse() {
  // @@protoc_insertion_point(destructor:GrpcGameService.GameCommandResponse)
  SharedDtor();
}

void GameCommandResponse::SharedDtor() {
  if (has_Commands()) {
    clear_Commands();
  }
}

void GameCommandResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameCommandResponse& GameCommandResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameCommandResponse_GameService_2eproto.base);
  return *internal_default_instance();
}


void GameCommandResponse::clear_Commands() {
// @@protoc_insertion_point(one_of_clear_start:GrpcGameService.GameCommandResponse)
  switch (Commands_case()) {
    case kMove: {
      delete Commands_.move_;
      break;
    }
    case kStart: {
      delete Commands_.start_;
      break;
    }
    case kEnd: {
      delete Commands_.end_;
      break;
    }
    case COMMANDS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMANDS_NOT_SET;
}


void GameCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GrpcGameService.GameCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Commands();
  _internal_metadata_.Clear();
}

const char* GameCommandResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GrpcGameService.GameMove move = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_move(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GrpcGameService.GameStart start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GrpcGameService.GameEnd end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameCommandResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GrpcGameService.GameCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GrpcGameService.GameMove move = 1;
  if (_internal_has_move()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::move(this), target, stream);
  }

  // .GrpcGameService.GameStart start = 2;
  if (_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start(this), target, stream);
  }

  // .GrpcGameService.GameEnd end = 3;
  if (_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GrpcGameService.GameCommandResponse)
  return target;
}

size_t GameCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GrpcGameService.GameCommandResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Commands_case()) {
    // .GrpcGameService.GameMove move = 1;
    case kMove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Commands_.move_);
      break;
    }
    // .GrpcGameService.GameStart start = 2;
    case kStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Commands_.start_);
      break;
    }
    // .GrpcGameService.GameEnd end = 3;
    case kEnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Commands_.end_);
      break;
    }
    case COMMANDS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameCommandResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GrpcGameService.GameCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCommandResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameCommandResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GrpcGameService.GameCommandResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GrpcGameService.GameCommandResponse)
    MergeFrom(*source);
  }
}

void GameCommandResponse::MergeFrom(const GameCommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GrpcGameService.GameCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Commands_case()) {
    case kMove: {
      _internal_mutable_move()->::GrpcGameService::GameMove::MergeFrom(from._internal_move());
      break;
    }
    case kStart: {
      _internal_mutable_start()->::GrpcGameService::GameStart::MergeFrom(from._internal_start());
      break;
    }
    case kEnd: {
      _internal_mutable_end()->::GrpcGameService::GameEnd::MergeFrom(from._internal_end());
      break;
    }
    case COMMANDS_NOT_SET: {
      break;
    }
  }
}

void GameCommandResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GrpcGameService.GameCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCommandResponse::CopyFrom(const GameCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GrpcGameService.GameCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCommandResponse::IsInitialized() const {
  return true;
}

void GameCommandResponse::InternalSwap(GameCommandResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(Commands_, other->Commands_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameCommandResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
class Position::_Internal {
 public:
};

Position::Position()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GrpcGameService.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&column_, &from.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&row_) -
    reinterpret_cast<char*>(&column_)) + sizeof(row_));
  // @@protoc_insertion_point(copy_constructor:GrpcGameService.Position)
}

void Position::SharedCtor() {
  ::memset(&column_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_) -
      reinterpret_cast<char*>(&column_)) + sizeof(row_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:GrpcGameService.Position)
  SharedDtor();
}

void Position::SharedDtor() {
}

void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Position_GameService_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:GrpcGameService.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&column_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_) -
      reinterpret_cast<char*>(&column_)) + sizeof(row_));
  _internal_metadata_.Clear();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GrpcGameService.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 column = 1;
  if (this->column() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_column(), target);
  }

  // int32 row = 2;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GrpcGameService.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GrpcGameService.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 column = 1;
  if (this->column() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_column());
  }

  // int32 row = 2;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GrpcGameService.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GrpcGameService.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GrpcGameService.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GrpcGameService.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.column() != 0) {
    _internal_set_column(from._internal_column());
  }
  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GrpcGameService.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GrpcGameService.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(column_, other->column_);
  swap(row_, other->row_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameMove::InitAsDefaultInstance() {
  ::GrpcGameService::_GameMove_default_instance_._instance.get_mutable()->from_ = const_cast< ::GrpcGameService::Position*>(
      ::GrpcGameService::Position::internal_default_instance());
  ::GrpcGameService::_GameMove_default_instance_._instance.get_mutable()->to_ = const_cast< ::GrpcGameService::Position*>(
      ::GrpcGameService::Position::internal_default_instance());
}
class GameMove::_Internal {
 public:
  static const ::GrpcGameService::Position& from(const GameMove* msg);
  static const ::GrpcGameService::Position& to(const GameMove* msg);
};

const ::GrpcGameService::Position&
GameMove::_Internal::from(const GameMove* msg) {
  return *msg->from_;
}
const ::GrpcGameService::Position&
GameMove::_Internal::to(const GameMove* msg) {
  return *msg->to_;
}
GameMove::GameMove()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GrpcGameService.GameMove)
}
GameMove::GameMove(const GameMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_from()) {
    from_ = new ::GrpcGameService::Position(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_to()) {
    to_ = new ::GrpcGameService::Position(*from.to_);
  } else {
    to_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GrpcGameService.GameMove)
}

void GameMove::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameMove_GameService_2eproto.base);
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
}

GameMove::~GameMove() {
  // @@protoc_insertion_point(destructor:GrpcGameService.GameMove)
  SharedDtor();
}

void GameMove::SharedDtor() {
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete to_;
}

void GameMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMove& GameMove::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameMove_GameService_2eproto.base);
  return *internal_default_instance();
}


void GameMove::Clear() {
// @@protoc_insertion_point(message_clear_start:GrpcGameService.GameMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GameMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GrpcGameService.Position from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GrpcGameService.Position to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GrpcGameService.GameMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GrpcGameService.Position from = 1;
  if (this->has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::from(this), target, stream);
  }

  // .GrpcGameService.Position to = 2;
  if (this->has_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::to(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GrpcGameService.GameMove)
  return target;
}

size_t GameMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GrpcGameService.GameMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GrpcGameService.Position from = 1;
  if (this->has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .GrpcGameService.Position to = 2;
  if (this->has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GrpcGameService.GameMove)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GrpcGameService.GameMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GrpcGameService.GameMove)
    MergeFrom(*source);
  }
}

void GameMove::MergeFrom(const GameMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GrpcGameService.GameMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_from()) {
    _internal_mutable_from()->::GrpcGameService::Position::MergeFrom(from._internal_from());
  }
  if (from.has_to()) {
    _internal_mutable_to()->::GrpcGameService::Position::MergeFrom(from._internal_to());
  }
}

void GameMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GrpcGameService.GameMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMove::CopyFrom(const GameMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GrpcGameService.GameMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMove::IsInitialized() const {
  return true;
}

void GameMove::InternalSwap(GameMove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_, other->from_);
  swap(to_, other->to_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameMove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameTile::InitAsDefaultInstance() {
  ::GrpcGameService::_GameTile_default_instance_._instance.get_mutable()->position_ = const_cast< ::GrpcGameService::Position*>(
      ::GrpcGameService::Position::internal_default_instance());
}
class GameTile::_Internal {
 public:
  static const ::GrpcGameService::Position& position(const GameTile* msg);
};

const ::GrpcGameService::Position&
GameTile::_Internal::position(const GameTile* msg) {
  return *msg->position_;
}
GameTile::GameTile()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GrpcGameService.GameTile)
}
GameTile::GameTile(const GameTile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::GrpcGameService::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&figurine_, &from.figurine_,
    static_cast<size_t>(reinterpret_cast<char*>(&figurinecolor_) -
    reinterpret_cast<char*>(&figurine_)) + sizeof(figurinecolor_));
  // @@protoc_insertion_point(copy_constructor:GrpcGameService.GameTile)
}

void GameTile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameTile_GameService_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&figurinecolor_) -
      reinterpret_cast<char*>(&position_)) + sizeof(figurinecolor_));
}

GameTile::~GameTile() {
  // @@protoc_insertion_point(destructor:GrpcGameService.GameTile)
  SharedDtor();
}

void GameTile::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void GameTile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameTile& GameTile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameTile_GameService_2eproto.base);
  return *internal_default_instance();
}


void GameTile::Clear() {
// @@protoc_insertion_point(message_clear_start:GrpcGameService.GameTile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&figurine_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&figurinecolor_) -
      reinterpret_cast<char*>(&figurine_)) + sizeof(figurinecolor_));
  _internal_metadata_.Clear();
}

const char* GameTile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GrpcGameService.Figurine figurine = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_figurine(static_cast<::GrpcGameService::Figurine>(val));
        } else goto handle_unusual;
        continue;
      // .GrpcGameService.Color figurineColor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_figurinecolor(static_cast<::GrpcGameService::Color>(val));
        } else goto handle_unusual;
        continue;
      // .GrpcGameService.Position position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameTile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GrpcGameService.GameTile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GrpcGameService.Figurine figurine = 1;
  if (this->figurine() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_figurine(), target);
  }

  // .GrpcGameService.Color figurineColor = 2;
  if (this->figurinecolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_figurinecolor(), target);
  }

  // .GrpcGameService.Position position = 3;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GrpcGameService.GameTile)
  return target;
}

size_t GameTile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GrpcGameService.GameTile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GrpcGameService.Position position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .GrpcGameService.Figurine figurine = 1;
  if (this->figurine() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_figurine());
  }

  // .GrpcGameService.Color figurineColor = 2;
  if (this->figurinecolor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_figurinecolor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameTile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GrpcGameService.GameTile)
  GOOGLE_DCHECK_NE(&from, this);
  const GameTile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameTile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GrpcGameService.GameTile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GrpcGameService.GameTile)
    MergeFrom(*source);
  }
}

void GameTile::MergeFrom(const GameTile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GrpcGameService.GameTile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::GrpcGameService::Position::MergeFrom(from._internal_position());
  }
  if (from.figurine() != 0) {
    _internal_set_figurine(from._internal_figurine());
  }
  if (from.figurinecolor() != 0) {
    _internal_set_figurinecolor(from._internal_figurinecolor());
  }
}

void GameTile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GrpcGameService.GameTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameTile::CopyFrom(const GameTile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GrpcGameService.GameTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameTile::IsInitialized() const {
  return true;
}

void GameTile::InternalSwap(GameTile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(figurine_, other->figurine_);
  swap(figurinecolor_, other->figurinecolor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameTile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameState::InitAsDefaultInstance() {
}
class GameState::_Internal {
 public:
};

GameState::GameState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GrpcGameService.GameState)
}
GameState::GameState(const GameState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tiles_(from.tiles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GrpcGameService.GameState)
}

void GameState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameState_GameService_2eproto.base);
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:GrpcGameService.GameState)
  SharedDtor();
}

void GameState::SharedDtor() {
}

void GameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameState& GameState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameState_GameService_2eproto.base);
  return *internal_default_instance();
}


void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:GrpcGameService.GameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiles_.Clear();
  _internal_metadata_.Clear();
}

const char* GameState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GrpcGameService.GameTile tiles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GrpcGameService.GameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GrpcGameService.GameTile tiles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tiles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GrpcGameService.GameState)
  return target;
}

size_t GameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GrpcGameService.GameState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GrpcGameService.GameTile tiles = 1;
  total_size += 1UL * this->_internal_tiles_size();
  for (const auto& msg : this->tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GrpcGameService.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  const GameState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GrpcGameService.GameState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GrpcGameService.GameState)
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GrpcGameService.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiles_.MergeFrom(from.tiles_);
}

void GameState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GrpcGameService.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GrpcGameService.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  return true;
}

void GameState::InternalSwap(GameState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tiles_.InternalSwap(&other->tiles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameStart::InitAsDefaultInstance() {
  ::GrpcGameService::_GameStart_default_instance_._instance.get_mutable()->state_ = const_cast< ::GrpcGameService::GameState*>(
      ::GrpcGameService::GameState::internal_default_instance());
}
class GameStart::_Internal {
 public:
  static const ::GrpcGameService::GameState& state(const GameStart* msg);
};

const ::GrpcGameService::GameState&
GameStart::_Internal::state(const GameStart* msg) {
  return *msg->state_;
}
GameStart::GameStart()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GrpcGameService.GameStart)
}
GameStart::GameStart(const GameStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gameid().empty()) {
    gameid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  if (from._internal_has_state()) {
    state_ = new ::GrpcGameService::GameState(*from.state_);
  } else {
    state_ = nullptr;
  }
  color_ = from.color_;
  // @@protoc_insertion_point(copy_constructor:GrpcGameService.GameStart)
}

void GameStart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameStart_GameService_2eproto.base);
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&state_)) + sizeof(color_));
}

GameStart::~GameStart() {
  // @@protoc_insertion_point(destructor:GrpcGameService.GameStart)
  SharedDtor();
}

void GameStart::SharedDtor() {
  gameid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete state_;
}

void GameStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameStart& GameStart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameStart_GameService_2eproto.base);
  return *internal_default_instance();
}


void GameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:GrpcGameService.GameStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  color_ = 0;
  _internal_metadata_.Clear();
}

const char* GameStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GrpcGameService.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_color(static_cast<::GrpcGameService::Color>(val));
        } else goto handle_unusual;
        continue;
      // .GrpcGameService.GameState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gameId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_gameid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GrpcGameService.GameStart.gameId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameStart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GrpcGameService.GameStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GrpcGameService.Color color = 1;
  if (this->color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_color(), target);
  }

  // .GrpcGameService.GameState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  // string gameId = 3;
  if (this->gameid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gameid().data(), static_cast<int>(this->_internal_gameid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GrpcGameService.GameStart.gameId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GrpcGameService.GameStart)
  return target;
}

size_t GameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GrpcGameService.GameStart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gameId = 3;
  if (this->gameid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameid());
  }

  // .GrpcGameService.GameState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .GrpcGameService.Color color = 1;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GrpcGameService.GameStart)
  GOOGLE_DCHECK_NE(&from, this);
  const GameStart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameStart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GrpcGameService.GameStart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GrpcGameService.GameStart)
    MergeFrom(*source);
  }
}

void GameStart::MergeFrom(const GameStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GrpcGameService.GameStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameid().size() > 0) {

    gameid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  if (from.has_state()) {
    _internal_mutable_state()->::GrpcGameService::GameState::MergeFrom(from._internal_state());
  }
  if (from.color() != 0) {
    _internal_set_color(from._internal_color());
  }
}

void GameStart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GrpcGameService.GameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStart::CopyFrom(const GameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GrpcGameService.GameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStart::IsInitialized() const {
  return true;
}

void GameStart::InternalSwap(GameStart* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gameid_.Swap(&other->gameid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameEnd::InitAsDefaultInstance() {
  ::GrpcGameService::_GameEnd_default_instance_.win_ = 0;
  ::GrpcGameService::_GameEnd_default_instance_.abandon_ = 0;
  ::GrpcGameService::_GameEnd_default_instance_.draw_ = false;
}
class GameEnd::_Internal {
 public:
};

GameEnd::GameEnd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GrpcGameService.GameEnd)
}
GameEnd::GameEnd(const GameEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_TypOfEnd();
  switch (from.TypOfEnd_case()) {
    case kWin: {
      _internal_set_win(from._internal_win());
      break;
    }
    case kAbandon: {
      _internal_set_abandon(from._internal_abandon());
      break;
    }
    case kDraw: {
      _internal_set_draw(from._internal_draw());
      break;
    }
    case TYPOFEND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GrpcGameService.GameEnd)
}

void GameEnd::SharedCtor() {
  clear_has_TypOfEnd();
}

GameEnd::~GameEnd() {
  // @@protoc_insertion_point(destructor:GrpcGameService.GameEnd)
  SharedDtor();
}

void GameEnd::SharedDtor() {
  if (has_TypOfEnd()) {
    clear_TypOfEnd();
  }
}

void GameEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameEnd& GameEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameEnd_GameService_2eproto.base);
  return *internal_default_instance();
}


void GameEnd::clear_TypOfEnd() {
// @@protoc_insertion_point(one_of_clear_start:GrpcGameService.GameEnd)
  switch (TypOfEnd_case()) {
    case kWin: {
      // No need to clear
      break;
    }
    case kAbandon: {
      // No need to clear
      break;
    }
    case kDraw: {
      // No need to clear
      break;
    }
    case TYPOFEND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPOFEND_NOT_SET;
}


void GameEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:GrpcGameService.GameEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_TypOfEnd();
  _internal_metadata_.Clear();
}

const char* GameEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GrpcGameService.Color win = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_win(static_cast<::GrpcGameService::Color>(val));
        } else goto handle_unusual;
        continue;
      // .GrpcGameService.Color abandon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_abandon(static_cast<::GrpcGameService::Color>(val));
        } else goto handle_unusual;
        continue;
      // bool draw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_draw(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GrpcGameService.GameEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GrpcGameService.Color win = 1;
  if (_internal_has_win()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_win(), target);
  }

  // .GrpcGameService.Color abandon = 2;
  if (_internal_has_abandon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_abandon(), target);
  }

  // bool draw = 3;
  if (_internal_has_draw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_draw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GrpcGameService.GameEnd)
  return target;
}

size_t GameEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GrpcGameService.GameEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (TypOfEnd_case()) {
    // .GrpcGameService.Color win = 1;
    case kWin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_win());
      break;
    }
    // .GrpcGameService.Color abandon = 2;
    case kAbandon: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_abandon());
      break;
    }
    // bool draw = 3;
    case kDraw: {
      total_size += 1 + 1;
      break;
    }
    case TYPOFEND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GrpcGameService.GameEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const GameEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GrpcGameService.GameEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GrpcGameService.GameEnd)
    MergeFrom(*source);
  }
}

void GameEnd::MergeFrom(const GameEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GrpcGameService.GameEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.TypOfEnd_case()) {
    case kWin: {
      _internal_set_win(from._internal_win());
      break;
    }
    case kAbandon: {
      _internal_set_abandon(from._internal_abandon());
      break;
    }
    case kDraw: {
      _internal_set_draw(from._internal_draw());
      break;
    }
    case TYPOFEND_NOT_SET: {
      break;
    }
  }
}

void GameEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GrpcGameService.GameEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEnd::CopyFrom(const GameEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GrpcGameService.GameEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEnd::IsInitialized() const {
  return true;
}

void GameEnd::InternalSwap(GameEnd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(TypOfEnd_, other->TypOfEnd_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Room::InitAsDefaultInstance() {
}
class Room::_Internal {
 public:
};

Room::Room()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GrpcGameService.Room)
}
Room::Room(const Room& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playercount_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(playercount_));
  // @@protoc_insertion_point(copy_constructor:GrpcGameService.Room)
}

void Room::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Room_GameService_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playercount_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(playercount_));
}

Room::~Room() {
  // @@protoc_insertion_point(destructor:GrpcGameService.Room)
  SharedDtor();
}

void Room::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Room::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Room& Room::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Room_GameService_2eproto.base);
  return *internal_default_instance();
}


void Room::Clear() {
// @@protoc_insertion_point(message_clear_start:GrpcGameService.Room)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playercount_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(playercount_));
  _internal_metadata_.Clear();
}

const char* Room::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 RoomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GrpcGameService.Room.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PlayerCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          playercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Room::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GrpcGameService.Room)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RoomId = 1;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_roomid(), target);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GrpcGameService.Room.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 PlayerCount = 3;
  if (this->playercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_playercount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GrpcGameService.Room)
  return target;
}

size_t Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GrpcGameService.Room)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 RoomId = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roomid());
  }

  // int32 PlayerCount = 3;
  if (this->playercount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playercount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Room::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GrpcGameService.Room)
  GOOGLE_DCHECK_NE(&from, this);
  const Room* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Room>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GrpcGameService.Room)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GrpcGameService.Room)
    MergeFrom(*source);
  }
}

void Room::MergeFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GrpcGameService.Room)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from.playercount() != 0) {
    _internal_set_playercount(from._internal_playercount());
  }
}

void Room::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GrpcGameService.Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room::CopyFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GrpcGameService.Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room::IsInitialized() const {
  return true;
}

void Room::InternalSwap(Room* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(roomid_, other->roomid_);
  swap(playercount_, other->playercount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Room::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GrpcGameService
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GrpcGameService::RoomListRequest* Arena::CreateMaybeMessage< ::GrpcGameService::RoomListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GrpcGameService::RoomListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GrpcGameService::RoomListResponse* Arena::CreateMaybeMessage< ::GrpcGameService::RoomListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GrpcGameService::RoomListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GrpcGameService::RoomCreateRequest* Arena::CreateMaybeMessage< ::GrpcGameService::RoomCreateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GrpcGameService::RoomCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GrpcGameService::RoomCreateResponse* Arena::CreateMaybeMessage< ::GrpcGameService::RoomCreateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GrpcGameService::RoomCreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GrpcGameService::RoomJoinRequest* Arena::CreateMaybeMessage< ::GrpcGameService::RoomJoinRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GrpcGameService::RoomJoinRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GrpcGameService::GameMoveRequest* Arena::CreateMaybeMessage< ::GrpcGameService::GameMoveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GrpcGameService::GameMoveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GrpcGameService::GameMoveResponse* Arena::CreateMaybeMessage< ::GrpcGameService::GameMoveResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GrpcGameService::GameMoveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GrpcGameService::GameCommandResponse* Arena::CreateMaybeMessage< ::GrpcGameService::GameCommandResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GrpcGameService::GameCommandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GrpcGameService::Position* Arena::CreateMaybeMessage< ::GrpcGameService::Position >(Arena* arena) {
  return Arena::CreateInternal< ::GrpcGameService::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::GrpcGameService::GameMove* Arena::CreateMaybeMessage< ::GrpcGameService::GameMove >(Arena* arena) {
  return Arena::CreateInternal< ::GrpcGameService::GameMove >(arena);
}
template<> PROTOBUF_NOINLINE ::GrpcGameService::GameTile* Arena::CreateMaybeMessage< ::GrpcGameService::GameTile >(Arena* arena) {
  return Arena::CreateInternal< ::GrpcGameService::GameTile >(arena);
}
template<> PROTOBUF_NOINLINE ::GrpcGameService::GameState* Arena::CreateMaybeMessage< ::GrpcGameService::GameState >(Arena* arena) {
  return Arena::CreateInternal< ::GrpcGameService::GameState >(arena);
}
template<> PROTOBUF_NOINLINE ::GrpcGameService::GameStart* Arena::CreateMaybeMessage< ::GrpcGameService::GameStart >(Arena* arena) {
  return Arena::CreateInternal< ::GrpcGameService::GameStart >(arena);
}
template<> PROTOBUF_NOINLINE ::GrpcGameService::GameEnd* Arena::CreateMaybeMessage< ::GrpcGameService::GameEnd >(Arena* arena) {
  return Arena::CreateInternal< ::GrpcGameService::GameEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::GrpcGameService::Room* Arena::CreateMaybeMessage< ::GrpcGameService::Room >(Arena* arena) {
  return Arena::CreateInternal< ::GrpcGameService::Room >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
