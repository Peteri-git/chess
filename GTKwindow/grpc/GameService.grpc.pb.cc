// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: GameService.proto

#include "GameService.pb.h"
#include "GameService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace GrpcGameService {

static const char* RoomService_method_names[] = {
  "/GrpcGameService.RoomService/List",
  "/GrpcGameService.RoomService/Create",
  "/GrpcGameService.RoomService/Join",
  "/GrpcGameService.RoomService/Move",
};

std::unique_ptr< RoomService::Stub> RoomService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RoomService::Stub> stub(new RoomService::Stub(channel));
  return stub;
}

RoomService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_List_(RoomService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Create_(RoomService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Join_(RoomService_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Move_(RoomService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RoomService::Stub::List(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest& request, ::GrpcGameService::RoomListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_List_, context, request, response);
}

void RoomService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest* request, ::GrpcGameService::RoomListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void RoomService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::RoomListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void RoomService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest* request, ::GrpcGameService::RoomListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

void RoomService::Stub::experimental_async::List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::RoomListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GrpcGameService::RoomListResponse>* RoomService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GrpcGameService::RoomListResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GrpcGameService::RoomListResponse>* RoomService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GrpcGameService::RoomListResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false);
}

::grpc::Status RoomService::Stub::Create(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest& request, ::GrpcGameService::RoomCreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Create_, context, request, response);
}

void RoomService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest* request, ::GrpcGameService::RoomCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void RoomService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::RoomCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void RoomService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest* request, ::GrpcGameService::RoomCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

void RoomService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::RoomCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GrpcGameService::RoomCreateResponse>* RoomService::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GrpcGameService::RoomCreateResponse>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GrpcGameService::RoomCreateResponse>* RoomService::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GrpcGameService::RoomCreateResponse>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, false);
}

::grpc::ClientReader< ::GrpcGameService::GameCommandResponse>* RoomService::Stub::JoinRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomJoinRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::GrpcGameService::GameCommandResponse>::Create(channel_.get(), rpcmethod_Join_, context, request);
}

void RoomService::Stub::experimental_async::Join(::grpc::ClientContext* context, ::GrpcGameService::RoomJoinRequest* request, ::grpc::experimental::ClientReadReactor< ::GrpcGameService::GameCommandResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::GrpcGameService::GameCommandResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Join_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::GrpcGameService::GameCommandResponse>* RoomService::Stub::AsyncJoinRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomJoinRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::GrpcGameService::GameCommandResponse>::Create(channel_.get(), cq, rpcmethod_Join_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::GrpcGameService::GameCommandResponse>* RoomService::Stub::PrepareAsyncJoinRaw(::grpc::ClientContext* context, const ::GrpcGameService::RoomJoinRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::GrpcGameService::GameCommandResponse>::Create(channel_.get(), cq, rpcmethod_Join_, context, request, false, nullptr);
}

::grpc::Status RoomService::Stub::Move(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest& request, ::GrpcGameService::GameMoveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Move_, context, request, response);
}

void RoomService::Stub::experimental_async::Move(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest* request, ::GrpcGameService::GameMoveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, std::move(f));
}

void RoomService::Stub::experimental_async::Move(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::GameMoveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, std::move(f));
}

void RoomService::Stub::experimental_async::Move(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest* request, ::GrpcGameService::GameMoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, reactor);
}

void RoomService::Stub::experimental_async::Move(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GrpcGameService::GameMoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GrpcGameService::GameMoveResponse>* RoomService::Stub::AsyncMoveRaw(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GrpcGameService::GameMoveResponse>::Create(channel_.get(), cq, rpcmethod_Move_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GrpcGameService::GameMoveResponse>* RoomService::Stub::PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::GrpcGameService::GameMoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GrpcGameService::GameMoveResponse>::Create(channel_.get(), cq, rpcmethod_Move_, context, request, false);
}

RoomService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoomService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoomService::Service, ::GrpcGameService::RoomListRequest, ::GrpcGameService::RoomListResponse>(
          std::mem_fn(&RoomService::Service::List), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoomService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoomService::Service, ::GrpcGameService::RoomCreateRequest, ::GrpcGameService::RoomCreateResponse>(
          std::mem_fn(&RoomService::Service::Create), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoomService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RoomService::Service, ::GrpcGameService::RoomJoinRequest, ::GrpcGameService::GameCommandResponse>(
          std::mem_fn(&RoomService::Service::Join), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoomService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoomService::Service, ::GrpcGameService::GameMoveRequest, ::GrpcGameService::GameMoveResponse>(
          std::mem_fn(&RoomService::Service::Move), this)));
}

RoomService::Service::~Service() {
}

::grpc::Status RoomService::Service::List(::grpc::ServerContext* context, const ::GrpcGameService::RoomListRequest* request, ::GrpcGameService::RoomListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RoomService::Service::Create(::grpc::ServerContext* context, const ::GrpcGameService::RoomCreateRequest* request, ::GrpcGameService::RoomCreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RoomService::Service::Join(::grpc::ServerContext* context, const ::GrpcGameService::RoomJoinRequest* request, ::grpc::ServerWriter< ::GrpcGameService::GameCommandResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RoomService::Service::Move(::grpc::ServerContext* context, const ::GrpcGameService::GameMoveRequest* request, ::GrpcGameService::GameMoveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace GrpcGameService

